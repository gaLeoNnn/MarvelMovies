{"version":3,"sources":["services/MarvelServices.js","hooks/http.hook.js","resources/error.gif","components/error/error.js","components/pages/SingleComicPage.js"],"names":["useMarvelServices","_useHttp","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","error","setError","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","ok","Error","concat","status","json","abrupt","t0","message","stop","_x","apply","useHttp","_apiKey","_apiBase","getAllCharacters","offset","res","results","map","item","_transformCharacter","getCharacterById","_ref2","_callee2","id","_context2","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","getComicById","_ref3","_callee3","_context3","_transformComic","_x2","getAllComics","_ref4","_callee4","_args4","_context4","console","log","title","prices","price","pageCount","ErrorMessage","_jsx","src","style","display","margin","width","height","alt","View","comic","_jsxs","_Fragment","children","className","Link","to","SingleComicPage","setComic","useParams","useEffect","onRequest","_useMarvelServices","comicId","then","onComicLoaded","errorMessage","loadingMessage","Spinner","content"],"mappings":"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","file":"static/js/5.c91daa60.chunk.js","sourcesContent":["import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelServices = () => {\n  const { loading, error, request } = useHttp();\n\n  const _apiKey = \"apikey=7f157a115b89c862a033dcc6e5812f12\";\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n  const _offset = 210;\n\n  const getAllCharacters = async (offset = 0) => {\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n\n    return res.data.results.map(item => {\n      return _transformCharacter(item);\n    });\n  };\n\n  const getCharacterById = async id => {\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n\n    return _transformCharacter(res.data.results[0]);\n  };\n\n  const _transformCharacter = char => {\n    return {\n      id: char.id,\n      name: char.name,\n      description: char.description\n        ? `${char.description.slice(0, 210)}...`\n        : \"There is no description for this character\",\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items,\n    };\n  };\n\n  const getComicById = async id => {\n    const res = await request(`${_apiBase}/comics/${id}?${_apiKey}`);\n\n    return _transformComic(res.data.results[0]);\n  };\n\n  const getAllComics = async (offset = _offset) => {\n    const res = await request(`${_apiBase}/comics?limit=8&offset=${offset}&${_apiKey}`);\n    console.log(res.data.results[0]);\n    return res.data.results.map(item => {\n      return _transformComic(item);\n    });\n  };\n\n  const _transformComic = comics => {\n    console.log(`${comics.description} + hi `);\n    return {\n      id: comics.id,\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n      title: comics.title,\n      description: comics.description || \"There is no description\",\n      prices: comics.prices[0].price + \"$\",\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No information about the number of pages\",\n    };\n  };\n\n  return { loading, error, getAllCharacters, getCharacterById, getAllComics, getComicById };\n};\n\nexport default useMarvelServices;\n","import { useCallback, useState } from \"react\";\n\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const request = useCallback(\n    async (url, method = \"GET\", body = null, headers = { \"Content-Type\": \"aplication/json\" }) => {\n      setLoading(true);\n\n      try {\n        const response = await fetch(url, { method, body, headers });\n\n        if (!response.ok) {\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n        }\n\n        const data = await response.json();\n        setLoading(false);\n\n        return data;\n      } catch (e) {\n        setLoading(false);\n        setError(e.message);\n      }\n    }\n  );\n\n  return { loading, error, request };\n};\n","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import error from \"../../resources/error.gif\";\n\nconst ErrorMessage = () => {\n  return <img src={error} style={{ display: \"block\", margin: \"0 auto\", width: 200, height: 200 }} alt=\"error\" />;\n};\nexport default ErrorMessage;\n","import \"./singleComic.scss\";\nimport { Link } from \"react-router-dom\";\nimport { useParams } from \"react-router-dom\";\nimport useMarvelServices from \"../../services/MarvelServices\";\nimport { useEffect, useState } from \"react\";\nimport Spinner from \"../spinner/spinner\";\nimport ErrorMessage from \"../error/error\";\n\nconst SingleComicPage = () => {\n  const [comic, setComic] = useState({});\n\n  const res = useParams();\n\n  useEffect(() => {\n    onRequest();\n  }, [res]);\n\n  const { getComicById, loading, error } = useMarvelServices();\n\n  const onRequest = () => {\n    getComicById(res.comicId).then(onComicLoaded);\n  };\n\n  const onComicLoaded = comic => {\n    setComic(comic);\n  };\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const loadingMessage = loading ? <Spinner /> : null;\n  const content = loading || error ? null : <View comic={comic} />;\n\n  return (\n    <div className=\"single-comic\">\n      {errorMessage}\n      {loadingMessage}\n      {content}\n    </div>\n  );\n};\n\nconst View = ({ comic }) => {\n  return (\n    <>\n      <img src={comic.thumbnail} alt=\"x-men\" className=\"single-comic__img\" />\n      <div className=\"single-comic__info\">\n        <h2 className=\"single-comic__name\">{comic.title}</h2>\n        <p className=\"single-comic__descr\">{comic.description}</p>\n        <p className=\"single-comic__descr\">{comic.pageCount}</p>\n        <p className=\"single-comic__descr\">Language: en-us</p>\n        <div className=\"single-comic__price\">{comic.prices}</div>\n      </div>\n      <Link to=\"/comics\" className=\"single-comic__back\">\n        Back to all\n      </Link>\n    </>\n  );\n};\n\nexport default SingleComicPage;\n"],"sourceRoot":""}