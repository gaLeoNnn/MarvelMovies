{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","resources/img/vision.png","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js"],"names":["View","_ref","char","name","description","thumbnail","homepage","wiki","_jsxs","_Fragment","children","_jsx","src","alt","className","href","RandomChar","_useState","useState","_useState2","_slicedToArray","setChar","useEffect","getRandomChar","_useMarvelServices","useMarvelServices","loading","error","getCharacterById","onChatLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","loadMessage","Spinner","content","onClick","mjolnir","CharList","props","_useState3","_useState4","disable","setDisable","_useState5","_useState6","newItemLoading","setNewItemLoading","_useState7","_useState8","offset","setOffset","_useState9","_useState10","focusId","setFocusId","myRef","useRef","getAllCharacters","onRequest","timerScroll","onScroll","window","innerHeight","scrollY","document","body","offsetHeight","clearTimeout","setTimeout","addEventListener","removeEventListener","initial","onCharLoading","res","onCharsLoaded","concat","_toConsumableArray","elem","map","item","i","imgStyled","focusLi","objectFit","undefined","CSSTransition","timeout","classNames","ref","el","current","onGetId","tabIndex","style","border","loadingMessage","TransitionGroup","component","disabled","Skeleton","comics","length","index","itemId","resourceURI","substring","Link","to","CharInfo","updateChar","selectedId","chars","skeleton","CharSearchForm","setDisabled","console","log","getCharacterByName","onCharLoaded","Formik","initialValues","charName","onSubmit","values","Form","htmlFor","Field","type","placeholder","MainPage","setSelectedId","decoration"],"mappings":"4NAAe,G,MAAA,IAA0B,qC,sCC0DzC,IAAMA,EAAO,SAAHC,GAAkB,IAAZC,EAAID,EAAJC,KACNC,EAAiDD,EAAjDC,KAAMC,EAA2CF,EAA3CE,YAAaC,EAA8BH,EAA9BG,UAAWC,EAAmBJ,EAAnBI,SAAUC,EAASL,EAATK,KAEhD,OACEC,eAAAC,WAAA,CAAAC,SAAA,CACEC,cAAA,OAAKC,IAAKP,EAAWQ,IAAI,mBAAmBC,UAAU,oBACtDN,eAAA,OAAKM,UAAU,mBAAkBJ,SAAA,CAC/BC,cAAA,KAAGG,UAAU,mBAAkBJ,SAAEP,IACjCQ,cAAA,KAAGG,UAAU,oBAAmBJ,SAAEN,IAClCI,eAAA,OAAKM,UAAU,mBAAkBJ,SAAA,CAC/BC,cAAA,KAAGI,KAAMT,EAAUQ,UAAU,sBAAqBJ,SAChDC,cAAA,OAAKG,UAAU,QAAOJ,SAAC,eAEzBC,cAAA,KAAGI,KAAMR,EAAMO,UAAU,2BAA0BJ,SACjDC,cAAA,OAAKG,UAAU,QAAOJ,SAAC,qBAQpBM,EAzEf,WACE,IAAAC,EAAwBC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA7Bf,EAAIiB,EAAA,GAAEE,EAAOF,EAAA,GAEpBG,qBAAU,WACRC,MACC,IAEH,IAAAC,EAA6CC,cAArCC,EAAOF,EAAPE,QAASC,EAAKH,EAALG,MAAOC,EAAgBJ,EAAhBI,iBAMlBC,EAAe,SAAA3B,GACnBmB,EAAQnB,IAGJqB,EAAgB,WACpB,IAAMO,EAAKC,KAAKC,MAAmB,IAAbD,KAAKE,SAAiC,QAC5DL,EAAiBE,GAAII,KAAKL,IAGtBM,EAAeR,EAAQhB,cAACyB,IAAY,IAAM,KAC1CC,EAAcX,EAAUf,cAAC2B,IAAO,IAAM,KACtCC,EAAWZ,GAAUD,EAAiC,KAAvBf,cAACX,EAAI,CAACE,KAAMA,IAEjD,OACEM,eAAA,OAAKM,UAAU,aAAYJ,SAAA,CACzBF,eAAA,OAAKM,UAAU,oBAAmBJ,SAAA,CAC/ByB,EACAE,EACAE,KAEH/B,eAAA,OAAKM,UAAU,qBAAoBJ,SAAA,CACjCF,eAAA,KAAGM,UAAU,oBAAmBJ,SAAA,CAAC,8BAE/BC,cAAA,SAAM,4CAGRA,cAAA,KAAGG,UAAU,oBAAmBJ,SAAC,0BACjCC,cAAA,UAAQG,UAAU,sBAAqBJ,SACrCC,cAAA,OAAK6B,QAhCQ,WACnBjB,KA+BkCT,UAAU,QAAOJ,SAAC,aAIhDC,cAAA,OAAKC,IAAK6B,EAAS5B,IAAI,UAAUC,UAAU,kC,+BC6DpC4B,MA1Gf,SAAkBC,GAChB,IAAA1B,EAAwBC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA7Bf,EAAIiB,EAAA,GAAEE,EAAOF,EAAA,GACpByB,EAA8B1B,oBAAS,GAAM2B,EAAAzB,YAAAwB,EAAA,GAAtCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAC1BG,EAA4C9B,oBAAS,GAAM+B,EAAA7B,YAAA4B,EAAA,GAApDE,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GACxCG,EAA4BlC,mBAAS,KAAImC,EAAAjC,YAAAgC,EAAA,GAAlCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxBG,EAA8BtC,mBAAS,MAAKuC,EAAArC,YAAAoC,EAAA,GAArCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GACpBG,EAAQC,iBAAO,IAMrBrC,EAA6CC,cAArCC,EAAOF,EAAPE,QAASC,EAAKH,EAALG,MAAOmC,EAAgBtC,EAAhBsC,iBAExBxC,qBAAU,WACRyC,EAAUT,GAAQ,KACjB,IAEHhC,qBAAU,WACR,IAAI0C,EACEC,EAAW,WACXC,OAAOC,YAAcD,OAAOE,SAAWC,SAASC,KAAKC,eACnDP,GACFQ,aAAaR,GAEfA,EAAcS,YAAW,WACvBV,EAAUT,KACT,OAMP,OAFAY,OAAOQ,iBAAiB,SAAUT,GAE3B,WACLC,OAAOS,oBAAoB,SAAUV,GACrCO,aAAaR,MAEd,CAACV,IAEJ,IAAMS,EAAY,SAACT,EAAQsB,GACfzB,GAAVyB,GACAC,IACAf,EAAiBR,GAAQpB,MAAK,SAAA4C,GAAG,OAAIC,EAAcD,OAG/CD,EAAgB,WACpB9B,GAAW,IAGPgC,EAAgB,SAAAD,GACpBzD,GAAQ,SAAAnB,GAAI,SAAA8E,OAAAC,YAAQ/E,GAAI+E,YAAKH,OAC7B/B,GAAW,GACXI,GAAkB,SAAAD,GAAc,OAAI,KACpCK,GAAU,SAAAD,GAAM,OAAIA,EAAS,MAGzB4B,EAAOhF,EAAKiF,KAAI,SAACC,EAAMC,GAC3B,IAKIC,EALAC,EAAU,aAYd,OAXIH,EAAKtD,KAAO4B,IACd6B,EAAU,kCAKVD,EADoB,uEAAlBF,EAAK/E,UACK,CAAEmF,eAAWC,GAEb,CAAED,UAAW,SAIzB7E,cAAC+E,IAAa,CAASC,QAAS,IAAKC,WAAYL,EAAQ7E,SACvDF,eAAA,MACEqF,IAAK,SAAAC,GAAE,OAAKlC,EAAMmC,QAAQV,GAAKS,GAC/BtD,QAAS,WAjEI,IAAAV,EAkEXa,EAAMqD,QAAQZ,EAAKtD,IAlERA,EAmEEsD,EAAKtD,GAlE1B6B,EAAW7B,IAqELmE,SAAU,EACVC,MAAO,CAAEC,OAAQ,cACjBrF,UAAWyE,EAAQ7E,SAAA,CAEnBC,cAAA,OAAKC,IAAKwE,EAAK/E,UAAW6F,MAAOZ,EAAWzE,IAAI,UAChDF,cAAA,OAAKG,UAAU,aAAYJ,SAAE0E,EAAKjF,SAN7BiF,EAAKtD,KAPMuD,MAmBlBlD,EAAeR,EAAQhB,cAACyB,IAAY,IAAM,KAC1CgE,EAAiB1E,IAAYwB,EAAiBvC,cAAC2B,IAAO,IAAM,KAElE,OACE9B,eAAA,OAAKM,UAAU,aAAYJ,SAAA,CACzBF,eAAA,MAAIM,UAAU,aAAYJ,SAAA,CACxBC,cAAC0F,IAAe,CAACC,UAAW,KAAK5F,SAAEwE,IAClC/C,EACAiE,KAEHzF,cAAA,UAAQ4F,SAAUzD,EAASN,QAAS,kBAAMuB,EAAUT,IAASxC,UAAU,mCAAkCJ,SACvGC,cAAA,OAAKG,UAAU,QAAOJ,SAAC,oBCxFhB8F,G,YAjBE,WACb,OACIhG,eAAAC,WAAA,CAAAC,SAAA,CACIC,cAAA,KAAGG,UAAU,eAAcJ,SAAC,iDAC5BF,eAAA,OAAKM,UAAU,WAAUJ,SAAA,CACrBF,eAAA,OAAKM,UAAU,yBAAwBJ,SAAA,CACnCC,cAAA,OAAKG,UAAU,2BACfH,cAAA,OAAKG,UAAU,4BAEnBH,cAAA,OAAKG,UAAU,0BACfH,cAAA,OAAKG,UAAU,0BACfH,cAAA,OAAKG,UAAU,kC,QCwC/B,IAAMd,EAAO,SAAHC,GAAkB,IAAZC,EAAID,EAAJC,KACNC,EAAyDD,EAAzDC,KAAMC,EAAmDF,EAAnDE,YAAaC,EAAsCH,EAAtCG,UAAWC,EAA2BJ,EAA3BI,SAAUC,EAAiBL,EAAjBK,KAAMkG,EAAWvG,EAAXuG,OAEtD,OACEjG,eAAAC,WAAA,CAAAC,SAAA,CACEF,eAAA,OAAKM,UAAU,eAAcJ,SAAA,CAC3BC,cAAA,OAAKC,IAAKP,EAAWQ,IAAI,UACzBL,eAAA,OAAAE,SAAA,CACEC,cAAA,OAAKG,UAAU,kBAAiBJ,SAAEP,IAClCK,eAAA,OAAKM,UAAU,aAAYJ,SAAA,CACzBC,cAAA,KAAGI,KAAMT,EAAUQ,UAAU,sBAAqBJ,SAChDC,cAAA,OAAKG,UAAU,QAAOJ,SAAC,eAEzBC,cAAA,KAAGI,KAAMR,EAAMO,UAAU,2BAA0BJ,SACjDC,cAAA,OAAKG,UAAU,QAAOJ,SAAC,oBAK/BC,cAAA,OAAKG,UAAU,cAAaJ,SAAEN,IAC9BO,cAAA,OAAKG,UAAU,eAAcJ,SAAC,YAC9BF,eAAA,MAAIM,UAAU,oBAAmBJ,SAAA,CAC9B+F,EAAOC,OAAS,EAAI,KAAO,yCAC3BD,EAAOtB,KAAI,SAACC,EAAMuB,GACjB,IAAMC,EAASxB,EAAKyB,YAAYC,UAAU,IAC1C,OAAIH,GAAS,EAEThG,cAAA,MAAgBG,UAAU,oBAAmBJ,SAC3CF,eAACuG,IAAI,CAACC,GAAE,WAAAhC,OAAa4B,GAASlG,SAAA,CAAE0E,EAAKjF,KAAK,QADnCwG,QAKX,YAQGM,EApFf,SAAkBtE,GAChB,IAAA1B,EAAwBC,mBAAS,MAAKC,EAAAC,YAAAH,EAAA,GAA/Bf,EAAIiB,EAAA,GAAEE,EAAOF,EAAA,GAEpBK,EAA6CC,cAArCC,EAAOF,EAAPE,QAASC,EAAKH,EAALG,MAAOC,EAAgBJ,EAAhBI,iBAExBN,qBAAU,WACR4F,MACC,IAEH5F,qBAAU,WACR4F,MACC,CAACvE,EAAMwE,aAEV,IAAMD,EAAa,WACjB,IAAQC,EAAexE,EAAfwE,WAEHA,GAILvF,EAAiBuF,GAAYjF,KAAKL,IAG9BA,EAAe,SAAAuF,GACnB/F,EAAQ+F,IAGJC,EAAWnH,GAAQwB,GAAWC,EAAQ,KAAOhB,cAAC6F,EAAQ,IACtDJ,EAAiB1E,EAAUf,cAAC2B,IAAO,IAAM,KACzCH,EAAeR,EAAQhB,cAACyB,IAAY,IAAM,KAC1CG,EAAUb,GAAWC,IAAUzB,EAAO,KAAOS,cAACX,EAAI,CAACE,KAAMA,IAE/D,OACES,cAAAF,WAAA,CAAAC,SACEF,eAAA,OAAKM,UAAU,aAAYJ,SAAA,CACxB2G,EACAjB,EACAjE,EACAI,QC/CM,MAA0B,mC,gBC0D1B+E,EApDQ,WACrB,IAAArG,EAAwBC,qBAAUC,EAAAC,YAAAH,EAAA,GAA3Bf,EAAIiB,EAAA,GAAEE,EAAOF,EAAA,GACpByB,EAAgC1B,oBAAS,GAAM2B,EAAAzB,YAAAwB,EAAA,GAAxC2D,EAAQ1D,EAAA,GAAE0E,EAAW1E,EAAA,GAC5B2E,QAAQC,IAAIvH,GACZ,IAAAsB,EAA+CC,cAAvCiG,EAAkBlG,EAAlBkG,mBAOFC,GAP6BnG,EAAPE,QAAcF,EAALG,MAOhB,SAAAzB,GACnBqH,GAAY,GACZlG,EAAQnB,KAGJgF,EAAQhF,EAAcA,EAAKC,KAC/BK,eAAA,OAAKM,UAAU,sBAAqBJ,SAAA,CAClCC,cAAA,KAAGG,UAAU,oBAAmBJ,SAAA,mBAAAsE,OAAqB9E,EAAKC,KAAI,YAC9DQ,cAACoG,IAAI,CAACC,GAAE,iBAAAhC,OAAmB9E,EAAK4B,IAAMhB,UAAU,sBAAqBJ,SACnEC,cAAA,OAAKG,UAAU,QAAOJ,SAAC,iBAI3BC,cAAA,OAAKG,UAAU,sBAAqBJ,SAClCC,cAAA,KAAGG,UAAU,wBAAuBJ,SAAC,gEATpB,KAarB,OACEC,cAACiH,IAAM,CACLC,cAAe,CACbC,SAAU,IAEZC,SAAU,SAAAC,GAAM,OA5BF,SAAAA,GAChBT,GAAY,GACZG,EAAmBM,EAAOF,UAAU5F,KAAKyF,GA0BnB5D,CAAUiE,IAAQtH,SAEtCF,eAACyH,IAAI,CAACnH,UAAU,oBAAmBJ,SAAA,CACjCC,cAAA,SAAOG,UAAU,qBAAqBoH,QAAQ,OAAMxH,SAAC,iCAGrDF,eAAA,OAAKM,UAAU,uBAAsBJ,SAAA,CACnCC,cAACwH,IAAK,CAACrG,GAAG,WAAW3B,KAAK,WAAWiI,KAAK,OAAOC,YAAY,eAC7D1H,cAACyB,IAAY,CAACtB,UAAU,QAAQX,KAAK,WAAWmG,UAAW,QAC3D3F,cAAA,UAAQ4F,SAAUA,EAAU6B,KAAK,SAAStH,UAAU,sBAAqBJ,SACvEC,cAAA,OAAKG,UAAU,QAAOJ,SAAC,cAG1BwE,QCvBMoD,UAtBE,WACf,IAAArH,EAAoCC,mBAAS,MAAKC,EAAAC,YAAAH,EAAA,GAA3CkG,EAAUhG,EAAA,GAAEoH,EAAapH,EAAA,GAKhC,OACER,cAAAF,WAAA,CAAAC,SACEF,eAAA,QAAAE,SAAA,CACEC,cAACK,EAAU,IACXR,eAAA,OAAKM,UAAU,gBAAeJ,SAAA,CAC5BC,cAAC+B,EAAQ,CAACsD,QATF,SAAAlE,GACdyG,EAAczG,MASRtB,eAAA,OAAAE,SAAA,CACEC,cAACsG,EAAQ,CAACE,WAAYA,IACtBxG,cAAC2G,EAAc,UAGnB3G,cAAA,OAAKG,UAAU,gBAAgBF,IAAK4H,EAAY3H,IAAI","file":"static/js/4.b70bc3e9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import \"./randomChar.scss\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\nimport { useEffect, useState } from \"react\";\nimport useMarvelServices from \"../../services/MarvelServices\";\nimport Spinner from \"../spinner/spinner\";\nimport ErrorMessage from \"../error/error\";\n\nfunction RandomChar() {\n  const [char, setChar] = useState({});\n\n  useEffect(() => {\n    getRandomChar();\n  }, []);\n\n  const { loading, error, getCharacterById } = useMarvelServices();\n\n  const onChangeChar = () => {\n    getRandomChar();\n  };\n\n  const onChatLoaded = char => {\n    setChar(char);\n  };\n\n  const getRandomChar = () => {\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n    getCharacterById(id).then(onChatLoaded);\n  };\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const loadMessage = loading ? <Spinner /> : null;\n  const content = !error && !loading ? <View char={char} /> : null;\n\n  return (\n    <div className=\"randomchar\">\n      <div className=\"randomchar__block\">\n        {errorMessage}\n        {loadMessage}\n        {content}\n      </div>\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button className=\"button button__main\">\n          <div onClick={onChangeChar} className=\"inner\">\n            try it\n          </div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n}\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki } = char;\n\n  return (\n    <>\n      <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">wiki</div>\n          </a>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default RandomChar;\n","import \"./charList.scss\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport useMarvelServices from \"../../services/MarvelServices\";\nimport { useEffect, useRef, useState } from \"react\";\nimport ErrorMessage from \"../error/error\";\nimport Spinner from \"../spinner/spinner\";\n\nfunction CharList(props) {\n  const [char, setChar] = useState([]);\n  const [disable, setDisable] = useState(false);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [focusId, setFocusId] = useState(null);\n  const myRef = useRef([]);\n\n  const setFocusCard = id => {\n    setFocusId(id);\n  };\n\n  const { loading, error, getAllCharacters } = useMarvelServices();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  useEffect(() => {\n    let timerScroll;\n    const onScroll = () => {\n      if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {\n        if (timerScroll) {\n          clearTimeout(timerScroll);\n        }\n        timerScroll = setTimeout(() => {\n          onRequest(offset);\n        }, 1000);\n      }\n    };\n\n    window.addEventListener(\"scroll\", onScroll);\n\n    return () => {\n      window.removeEventListener(\"scroll\", onScroll);\n      clearTimeout(timerScroll);\n    };\n  }, [offset]);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    onCharLoading();\n    getAllCharacters(offset).then(res => onCharsLoaded(res));\n  };\n\n  const onCharLoading = () => {\n    setDisable(true);\n  };\n\n  const onCharsLoaded = res => {\n    setChar(char => [...char, ...res]);\n    setDisable(false);\n    setNewItemLoading(newItemLoading => true);\n    setOffset(offset => offset + 9);\n  };\n\n  const elem = char.map((item, i) => {\n    let focusLi = \"char__item\";\n    if (item.id === focusId) {\n      focusLi = \"char__item char__item_selected\";\n    }\n\n    let imgStyled;\n    if (item.thumbnail == \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n      imgStyled = { objectFit: undefined };\n    } else {\n      imgStyled = { objectFit: \"cover\" };\n    }\n\n    return (\n      <CSSTransition key={i} timeout={500} classNames={focusLi}>\n        <li\n          ref={el => (myRef.current[i] = el)}\n          onClick={() => {\n            props.onGetId(item.id);\n            setFocusCard(item.id);\n          }}\n          key={item.id}\n          tabIndex={0}\n          style={{ border: \"1px solid \" }}\n          className={focusLi}\n        >\n          <img src={item.thumbnail} style={imgStyled} alt=\"abyss\" />\n          <div className=\"char__name\">{item.name}</div>\n        </li>\n      </CSSTransition>\n    );\n  });\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const loadingMessage = loading && !newItemLoading ? <Spinner /> : null;\n\n  return (\n    <div className=\"char__list\">\n      <ul className=\"char__grid\">\n        <TransitionGroup component={null}>{elem}</TransitionGroup>\n        {errorMessage}\n        {loadingMessage}\n      </ul>\n      <button disabled={disable} onClick={() => onRequest(offset)} className=\"button button__main button__long\">\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n}\n\nexport default CharList;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import \"./charInfo.scss\";\n\nimport { useEffect, useState } from \"react\";\nimport useMarvelServices from \"../../services/MarvelServices\";\nimport Spinner from \"../spinner/spinner\";\nimport ErrorMessage from \"../error/error\";\nimport Skeleton from \"../skeleton/Skeleton\";\nimport { Link } from \"react-router-dom\";\n\nfunction CharInfo(props) {\n  const [char, setChar] = useState(null);\n\n  const { loading, error, getCharacterById } = useMarvelServices();\n\n  useEffect(() => {\n    updateChar();\n  }, []);\n\n  useEffect(() => {\n    updateChar();\n  }, [props.selectedId]);\n\n  const updateChar = () => {\n    const { selectedId } = props;\n\n    if (!selectedId) {\n      return;\n    }\n\n    getCharacterById(selectedId).then(onChatLoaded);\n  };\n\n  const onChatLoaded = chars => {\n    setChar(chars);\n  };\n\n  const skeleton = char || loading || error ? null : <Skeleton />;\n  const loadingMessage = loading ? <Spinner /> : null;\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const content = loading || error || !char ? null : <View char={char} />;\n\n  return (\n    <>\n      <div className=\"char__info\">\n        {skeleton}\n        {loadingMessage}\n        {errorMessage}\n        {content}\n      </div>\n    </>\n  );\n}\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = char;\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt=\"abyss\" />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">Homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : \"There is no comics with this character\"}\n        {comics.map((item, index) => {\n          const itemId = item.resourceURI.substring(43);\n          if (index <= 9) {\n            return (\n              <li key={index} className=\"char__comics-item\">\n                <Link to={`/comics/${itemId}`}>{item.name} </Link>\n              </li>\n            );\n          } else {\n            return;\n          }\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default CharInfo;\n","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import \"./charSearchForm.scss\";\nimport useMarvelServices from \"../../services/MarvelServices\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst CharSearchForm = () => {\n  const [char, setChar] = useState();\n  const [disabled, setDisabled] = useState(false);\n  console.log(char);\n  const { getCharacterByName, loading, error } = useMarvelServices();\n\n  const onRequest = values => {\n    setDisabled(true);\n    getCharacterByName(values.charName).then(onCharLoaded);\n  };\n\n  const onCharLoaded = char => {\n    setDisabled(false);\n    setChar(char);\n  };\n\n  const elem = !char ? null : char.name ? (\n    <div className=\"char__search-result\">\n      <p className=\"char__search-name\">{`There is! Visit ${char.name} page?`}</p>\n      <Link to={`/MarvelMovies/${char.id}`} className=\"button button__main\">\n        <div className=\"inner\">TO PAGE</div>\n      </Link>\n    </div>\n  ) : (\n    <div className=\"char__search-result\">\n      <p className=\"char__search-name_not\">The character was not found. Check the name and try again</p>\n    </div>\n  );\n\n  return (\n    <Formik\n      initialValues={{\n        charName: \"\",\n      }}\n      onSubmit={values => onRequest(values)}\n    >\n      <Form className=\"char__search-form\">\n        <label className=\"char__search-lable\" htmlFor=\"name\">\n          Or find a character by name:\n        </label>\n        <div className=\"char__search-wrapper\">\n          <Field id=\"CharName\" name=\"charName\" type=\"text\" placeholder=\"Enter name\" />\n          <ErrorMessage className=\"error\" name=\"charName\" component={\"div\"} />\n          <button disabled={disabled} type=\"submit\" className=\"button button__main\">\n            <div className=\"inner\">Find</div>\n          </button>\n        </div>\n        {elem}\n      </Form>\n    </Formik>\n  );\n};\nexport default CharSearchForm;\n","import RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\n\nimport decoration from \"../../resources/img/vision.png\";\nimport { useState } from \"react\";\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\n\nconst MainPage = () => {\n  const [selectedId, setSelectedId] = useState(null);\n  const onGetId = id => {\n    setSelectedId(id);\n  };\n\n  return (\n    <>\n      <main>\n        <RandomChar />\n        <div className=\"char__content\">\n          <CharList onGetId={onGetId} />\n          <div>\n            <CharInfo selectedId={selectedId} />\n            <CharSearchForm />\n          </div>\n        </div>\n        <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n      </main>\n    </>\n  );\n};\nexport default MainPage;\n"],"sourceRoot":""}